name: SGPM (Singapore PopMart) Monitor

on:
  schedule:
    - cron: '*/5 * * * *'  # 每5分钟运行一次
  workflow_dispatch:  # 允许手动触发
  push:
    branches: [ main ]  # 推送到主分支时运行（用于测试）
    paths:
      - 'src/sgpm-main.ts'
      - 'src/sgpm-optimized-main.ts'  # 添加优化版本
      - 'src/config-sgpm.ts'
      - 'src/services/SgpmService.ts'
      - 'src/services/OptimizedSgpmService.ts'  # 添加优化版本
      - '.github/workflows/sgpm-monitor.yml'

env:
  NODE_ENV: production
  USE_PROXY: false  # SGPM不需要代理
  PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: false
  PUPPETEER_DOWNLOAD_HOST: 'https://npmmirror.com/mirrors/chromium'

jobs:
  sgpm-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # SGPM监控通常较快

    strategy:
      fail-fast: false  # 即使失败也不影响其他workflow

    env:
      # SGPM专用的Telegram配置
      SGPM_BOT_TOKEN: ${{ secrets.SGPM_BOT_TOKEN }}
      SGPM_CHAT_ID: ${{ secrets.SGPM_CHAT_ID }}
      # 调试模式
      DEBUG_MODE: ${{ vars.DEBUG_MODE || 'false' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 只获取最新提交，加快速度

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci --include=dev
          # 安装Puppeteer的Chromium
          npx puppeteer browsers install chrome

      - name: Verify SGPM environment
        run: |
          echo "✅ Node: $(node --version), NPM: $(npm --version)"
          echo "🤖 Bot: ${SGPM_BOT_TOKEN:+✅}${SGPM_BOT_TOKEN:-❌}, Chat: ${SGPM_CHAT_ID:+✅}${SGPM_CHAT_ID:-❌}"

      - name: Check SGPM status
        run: |
          echo "📋 状态文件: $([ -f 'sgpm-products-status.json' ] && echo '✅ 存在' || echo '❌ 不存在')"

      - name: Run SGPM monitoring
        run: |
          echo "🚀 启动SGPM高性能监控..."
          node --expose-gc --max-old-space-size=1024 -r ts-node/register src/sgpm-optimized-main.ts 2>&1 | tee sgpm-monitoring.log
        timeout-minutes: 8  # 进一步优化超时时间

      - name: Check results
        if: always()
        run: |
          # 简化的结果检查
          STATUS_FILE=$([ -f "sgpm-products-status.json" ] && echo "✅" || echo "❌")
          LOG_LINES=$([ -f "sgpm-monitoring.log" ] && wc -l < sgpm-monitoring.log || echo "0")
          ERRORS=$([ -f "sgpm-monitoring.log" ] && grep -c -i "error\|fail" sgpm-monitoring.log 2>/dev/null || echo "0")
          SUCCESS=$([ -f "sgpm-monitoring.log" ] && grep -c -i "✅\|完成\|成功" sgpm-monitoring.log 2>/dev/null || echo "0")

          echo "📊 结果: 状态文件${STATUS_FILE} | 日志${LOG_LINES}行 | 错误${ERRORS} | 成功${SUCCESS}"

      - name: Upload logs
        if: failure()  # 只在失败时上传日志
        uses: actions/upload-artifact@v4
        with:
          name: sgpm-logs-${{ github.run_number }}
          path: sgpm-monitoring.log
          retention-days: 3  # 减少保留时间

      - name: Notify failure
        if: failure()
        run: |
          # 简化的失败通知
          if [ -n "$SGPM_BOT_TOKEN" ] && [ -n "$SGPM_CHAT_ID" ]; then
            curl -s -X POST "https://api.telegram.org/bot${SGPM_BOT_TOKEN}/sendMessage" \
              -d chat_id="${SGPM_CHAT_ID}" \
              -d text="� SGPM监控失败 #${{ github.run_number }} - ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
              > /dev/null 2>&1
          fi

      - name: Cleanup
        if: always()
        run: rm -f sgpm-monitoring.log
