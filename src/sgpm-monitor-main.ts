import dotenv from 'dotenv';
import { SgpmMonitorService } from './services/SgpmMonitorService';
import { logger } from './utils/logger';

// Âä†ËΩΩÁéØÂ¢ÉÂèòÈáè
dotenv.config();

// SGPM‰∫ßÂìÅURLÂàóË°®
const SGPM_PRODUCT_URLS = [
  'https://www.popmart.com/sg/products/5631/Hirono%20Living%20Wild-Fight%20for%20Joy%20Plush%20Doll',
  'https://www.popmart.com/sg/pop-now/set/64',
  'https://www.popmart.com/sg/products/5629/THE%20MONSTERS%20Wacky%20Mart%20Series-Earphone%20Case',
  'https://www.popmart.com/sg/products/5628/LABUBU%20HIDE%20AND%20SEEK%20IN%20SINGAPORE%20SERIES-Vinyl%20Plush%20Doll%20Pendant',
  'https://www.popmart.com/sg/products/5627/THE%20MONSTERS%20COCA%20COLA%20SERIES-Vinyl%20Face%20Blind%20Box',
  'https://www.popmart.com/sg/products/5626/THE%20MONSTERS%20FALL%20IN%20WILD%20SERIES-Vinyl%20Plush%20Doll%20Pendant',
  'https://www.popmart.com/sg/products/5625/THE%20MONSTERS%20FALL%20IN%20WILD%20SERIES-Vinyl%20Plush%20Doll',
  'https://www.popmart.com/sg/products/5624/TwinkleTwinkle%20Bee%20Your%20Honey%20Figure'
];

async function main(): Promise<void> {
  const startTime = Date.now();
  
  try {
    logger.info('=== SGPMÁõëÊéßÁ≥ªÁªüÂêØÂä® ===');
    
    // Ê£ÄÊü•TelegramÈÖçÁΩÆ
    const botToken = process.env.SGPM_BOT_TOKEN;
    const chatId = process.env.SGPM_CHAT_ID;
    
    if (botToken && chatId) {
      logger.info('üì± TelegramÈÄöÁü•: ‚úÖ Â∑≤ÈÖçÁΩÆ');
    } else {
      logger.warn('üì± TelegramÈÄöÁü•: ‚ùå Êú™ÈÖçÁΩÆ');
      logger.warn('‚ö†Ô∏è ÈúÄË¶ÅËÆæÁΩÆ SGPM_BOT_TOKEN Âíå SGPM_CHAT_ID ÁéØÂ¢ÉÂèòÈáè');
    }
    
    logger.info(`üìä ÁõëÊéß‰∫ßÂìÅÊï∞Èáè: ${SGPM_PRODUCT_URLS.length}`);
    logger.info(`üåê ËøêË°åÁéØÂ¢É: ${process.env.NODE_ENV || 'Êú¨Âú∞ÁéØÂ¢É'}`);

    // ÂàõÂª∫ÁõëÊéßÊúçÂä°
    const monitor = new SgpmMonitorService(botToken, chatId);

    // ÂàùÂßãÂåñÊµèËßàÂô®
    await monitor.initBrowser();

    // ÂºÄÂßãÁõëÊéß
    logger.info('üöÄ ÂºÄÂßãSGPMÁõëÊéß...');
    await monitor.monitorProducts(SGPM_PRODUCT_URLS);
    
    // ÂÖ≥Èó≠ÊµèËßàÂô®
    await monitor.closeBrowser();
    
    const duration = Date.now() - startTime;
    logger.info(`‚úÖ ÁõëÊéßÂÆåÊàêÔºåÊÄªËÄóÊó∂: ${duration}ms`);
    
  } catch (error) {
    logger.error('‚ùå ÁõëÊéßËøáÁ®ã‰∏≠ÂèëÁîüÈîôËØØ:', error);
    process.exit(1);
  }
}

// Â§ÑÁêÜÊú™ÊçïËé∑ÁöÑÂºÇÂ∏∏
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Êú™Â§ÑÁêÜÁöÑPromiseÊãíÁªù:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  logger.error('Êú™ÊçïËé∑ÁöÑÂºÇÂ∏∏:', error);
  process.exit(1);
});

// ËøêË°å‰∏ªÁ®ãÂ∫è
if (require.main === module) {
  main().catch(error => {
    logger.error('‰∏ªÁ®ãÂ∫èÊâßË°åÂ§±Ë¥•:', error);
    process.exit(1);
  });
}

export { main as sgpmMonitorMain };
